/******************************************************
The index tree cursor

(c) 1994-1996 Innobase Oy

Created 10/16/1994 Heikki Tuuri
*******************************************************/
/*索引树游标*/
#include "btr0btr.h"

/*************************************************************
Returns the page cursor component of a tree cursor. */ /*返回树游标的页面游标组件。*/
UNIV_INLINE
page_cur_t*
btr_cur_get_page_cur(
/*=================*/
				/* out: pointer to page cursor component */
	btr_cur_t*	cursor)	/* in: tree cursor */
{
	return(&(cursor->page_cur));
}

/*************************************************************
Returns the record pointer of a tree cursor. */ /*返回树游标的记录指针。*/
UNIV_INLINE
rec_t*
btr_cur_get_rec(
/*============*/
				/* out: pointer to record */
	btr_cur_t*	cursor)	/* in: tree cursor */
{
	return(page_cur_get_rec(&(cursor->page_cur)));
}

/*************************************************************
Invalidates a tree cursor by setting record pointer to NULL. */ /*通过将记录指针设置为NULL使树游标失效。*/
UNIV_INLINE
void
btr_cur_invalidate(
/*===============*/
	btr_cur_t*	cursor)	/* in: tree cursor */
{
	page_cur_invalidate(&(cursor->page_cur));
}

/*************************************************************
Returns the page of a tree cursor. */ /*返回树状游标的页面。*/
UNIV_INLINE
page_t*
btr_cur_get_page(
/*=============*/
				/* out: pointer to page */
	btr_cur_t*	cursor)	/* in: tree cursor */
{
	return(buf_frame_align(page_cur_get_rec(&(cursor->page_cur))));
}

/*************************************************************
Returns the tree of a cursor. */ /*返回游标树。*/
UNIV_INLINE
dict_tree_t*
btr_cur_get_tree(
/*=============*/
				/* out: tree */
	btr_cur_t*	cursor)	/* in: tree cursor */
{
	return((cursor->index)->tree);
}

/*************************************************************
Positions a tree cursor at a given record. */ /*将树状游标定位在给定的记录上。*/
UNIV_INLINE
void
btr_cur_position(
/*=============*/
	dict_index_t*	index, 	/* in: index */
	rec_t*		rec,	/* in: record in tree */
	btr_cur_t*	cursor)	/* in: cursor */
{
	page_cur_position(rec, btr_cur_get_page_cur(cursor));

	cursor->index = index;
}

/*************************************************************************
Checks if compressing an index page where a btr cursor is placed makes
sense. */ /*检查压缩放置btr游标的索引页是否有意义。*/
UNIV_INLINE
ibool
btr_cur_compress_recommendation(
/*============================*/
				/* out: TRUE if compression is recommended */
	btr_cur_t*	cursor,	/* in: btr cursor */
	mtr_t*		mtr)	/* in: mtr */
{
	page_t*		page;
	
	ut_ad(mtr_memo_contains(mtr, buf_block_align(
					btr_cur_get_page(cursor)),
				MTR_MEMO_PAGE_X_FIX));

	page = btr_cur_get_page(cursor);

	if ((page_get_data_size(page) < BTR_CUR_PAGE_COMPRESS_LIMIT)
 	    || ((btr_page_get_next(page, mtr) == FIL_NULL)
		&& (btr_page_get_prev(page, mtr) == FIL_NULL))) {

		/* The page fillfactor has dropped below a predefined
		minimum value OR the level in the B-tree contains just
		one page: we recommend compression if this is not the
		root page. */
		/*页面填充因子低于预定义的最小值或b树中的级别只包含一个页面:如果这不是根页面，我们建议进行压缩。*/
		if (dict_tree_get_page((cursor->index)->tree)
		    == buf_frame_get_page_no(page)) {

		    	/* It is the root page */

		    	return(FALSE);
		}

		return(TRUE);
	}

	return(FALSE);
}	

/*************************************************************************
Checks if the record on which the cursor is placed can be deleted without
making tree compression necessary (or, recommended). */
/*检查是否可以删除游标所在的记录，而无需进行树压缩(或推荐)。*/
UNIV_INLINE
ibool
btr_cur_can_delete_without_compress(
/*================================*/
				/* out: TRUE if can be deleted without
				recommended compression */
	btr_cur_t*	cursor,	/* in: btr cursor */
	mtr_t*		mtr)	/* in: mtr */
{
	ulint		rec_size;
	page_t*		page;
	
	ut_ad(mtr_memo_contains(mtr, buf_block_align(
					btr_cur_get_page(cursor)),
				MTR_MEMO_PAGE_X_FIX));

	rec_size = rec_get_size(btr_cur_get_rec(cursor));

	page = btr_cur_get_page(cursor);

	if ((page_get_data_size(page) - rec_size < BTR_CUR_PAGE_COMPRESS_LIMIT)
 	    || ((btr_page_get_next(page, mtr) == FIL_NULL)
		&& (btr_page_get_prev(page, mtr) == FIL_NULL))
	    || (page_get_n_recs(page) < 2)) { 

		/* The page fillfactor will drop below a predefined
		minimum value, OR the level in the B-tree contains just
		one page, OR the page will become empty: we recommend
		compression if this is not the root page. */
		/*页面填充因子将低于预定义的最小值，或者b -树中的级别只包含一个页面，或者页面将变为空:如果这不是根页面，我们建议压缩。*/
		if (dict_tree_get_page((cursor->index)->tree)
		    == buf_frame_get_page_no(page)) {

		    	/* It is the root page */

		    	return(TRUE);
		}

		return(FALSE);
	}

	return(TRUE);
}
