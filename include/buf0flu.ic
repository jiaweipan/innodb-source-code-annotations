/******************************************************
The database buffer pool flush algorithm
数据库缓冲池淘汰算法
(c) 1995 Innobase Oy

Created 11/5/1995 Heikki Tuuri
*******************************************************/

#include "buf0buf.h"
#include "mtr0mtr.h"

/************************************************************************
Inserts a modified block into the flush list. */
/*将修改后的块插入刷新列表中。*/
void
buf_flush_insert_into_flush_list(
/*=============================*/
	buf_block_t*	block);	/* in: block which is modified */
/************************************************************************
Inserts a modified block into the flush list in the right sorted position.
This function is used by recovery, because there the modifications do not
necessarily come in the order of lsn's. */
/*将修改后的块插入到刷新列表的右排序位置。这个函数用于恢复，因为在恢复中修改不一定是按照lsn的顺序来的。*/
void
buf_flush_insert_sorted_into_flush_list(
/*====================================*/
	buf_block_t*	block);	/* in: block which is modified */

/************************************************************************
This function should be called at a mini-transaction commit, if a page was
modified in it. Puts the block to the list of modified blocks, if it is not
already in it. 如果在迷你事务提交中修改了页面，则应该在提交时调用此函数。如果该块还没有在其中，则将其放入已修改块的列表中。*/
UNIV_INLINE
void
buf_flush_note_modification(
/*========================*/
	buf_block_t*	block,	/* in: block which is modified */
	mtr_t*		mtr)	/* in: mtr */
{
	ut_ad(block);
	ut_ad(block->state == BUF_BLOCK_FILE_PAGE);
	ut_ad(block->buf_fix_count > 0);
	ut_ad(rw_lock_own(&(block->lock), RW_LOCK_EX));
	ut_ad(mutex_own(&(buf_pool->mutex)));

	ut_ad(ut_dulint_cmp(mtr->start_lsn, ut_dulint_zero) != 0);
	ut_ad(mtr->modifications);
	ut_ad(ut_dulint_cmp(block->newest_modification, mtr->end_lsn) <= 0);
	
	block->newest_modification = mtr->end_lsn;

	if (ut_dulint_is_zero(block->oldest_modification)) {
		
		block->oldest_modification = mtr->start_lsn;
		ut_ad(!ut_dulint_is_zero(block->oldest_modification));

		buf_flush_insert_into_flush_list(block);
	} else {
		ut_ad(ut_dulint_cmp(block->oldest_modification,
							mtr->start_lsn) <= 0);
	}
}

/************************************************************************
This function should be called when recovery has modified a buffer page. */
/*当恢复修改了缓冲页时，应该调用他的函数。*/
UNIV_INLINE
void
buf_flush_recv_note_modification(
/*=============================*/
	buf_block_t*	block,		/* in: block which is modified */
	dulint		start_lsn,	/* in: start lsn of the first mtr in a
					set of mtr's */
	dulint		end_lsn)	/* in: end lsn of the last mtr in the
					set of mtr's */
{
	ut_ad(block);
	ut_ad(block->state == BUF_BLOCK_FILE_PAGE);
	ut_ad(block->buf_fix_count > 0);
	ut_ad(rw_lock_own(&(block->lock), RW_LOCK_EX));

	mutex_enter(&(buf_pool->mutex));
	
	ut_ad(ut_dulint_cmp(block->newest_modification, end_lsn) <= 0);
	
	block->newest_modification = end_lsn;

	if (ut_dulint_is_zero(block->oldest_modification)) {
		
		block->oldest_modification = start_lsn;

		ut_ad(!ut_dulint_is_zero(block->oldest_modification));

		buf_flush_insert_sorted_into_flush_list(block);
	} else {
		ut_ad(ut_dulint_cmp(block->oldest_modification,
							start_lsn) <= 0);
	}

	mutex_exit(&(buf_pool->mutex));
}
