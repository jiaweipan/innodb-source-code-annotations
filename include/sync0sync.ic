/******************************************************
Mutex, the basic synchronization primitive

(c) 1995 Innobase Oy

Created 9/5/1995 Heikki Tuuri
*******************************************************/
/*互斥，基本的同步原语*/
/**********************************************************************
Sets the waiters field in a mutex. */
/*设置互斥锁中的waiter字段。*/
void
mutex_set_waiters(
/*==============*/
	mutex_t*	mutex,	/* in: mutex */
	ulint		n);	/* in: value to set */		
/**********************************************************************
Reserves a mutex for the current thread. If the mutex is reserved, the
function spins a preset time (controlled by SYNC_SPIN_ROUNDS) waiting
for the mutex before suspending the thread. */
/*为当前线程保留一个互斥锁。如果互斥锁被保留，函数在挂起线程之前旋转一个预先设定的时间(由SYNC_SPIN_ROUNDS控制)来等待互斥锁。*/
void
mutex_spin_wait(
/*============*/
        mutex_t*	mutex,  	/* in: pointer to mutex */
	char*		file_name,/* in: file name where mutex requested */
	ulint		line);	/* in: line where requested */
/**********************************************************************
Sets the debug information for a reserved mutex. */
/*为保留的互斥锁设置调试信息。*/
void
mutex_set_debug_info(
/*=================*/
	mutex_t*	mutex,		/* in: mutex */
	char*		file_name,	/* in: file where requested */
	ulint		line);		/* in: line where requested */
/**********************************************************************
Releases the threads waiting in the primary wait array for this mutex. */
/*释放在主等待数组中等待这个互斥锁的线程。*/
void
mutex_signal_object(
/*================*/
	mutex_t*	mutex);	/* in: mutex */

/**********************************************************************
Performs an atomic test-and-set instruction to the lock_word field of a
mutex. */
/*对互斥锁的lock_word字段执行原子测试和设置指令。*/
UNIV_INLINE
ulint
mutex_test_and_set(
/*===============*/
				/* out: the previous value of lock_word: 0 or
				1 */
	mutex_t*	mutex)	/* in: mutex */
{
#ifdef _WIN32
	ulint	res;
	ulint*	lw;		/* assembler code is used to ensure that
				lock_word is loaded from memory */ /*汇编代码用于确保lock_word从内存中加载*/
	ut_ad(mutex);
	ut_ad(sizeof(ulint) == 4);

	lw = &(mutex->lock_word);

        __asm   MOV     ECX, lw
	__asm   MOV     EDX, 1
        __asm   XCHG    EDX, DWORD PTR [ECX]                    
       	__asm   MOV     res, EDX

	/* The fence below would prevent this thread from reading the data
	structure protected by the mutex before the test-and-set operation is
	committed, but the fence is apparently not needed:

	In a posting to comp.arch newsgroup (August 10, 1997) Andy Glew said
	that in P6 a LOCKed instruction like XCHG establishes a fence with
	respect to memory reads and writes and thus an explicit fence is not
	needed. In P5 he seemed to agree with a previous newsgroup poster that
	LOCKed instructions serialize all instruction execution, and,
	consequently, also memory operations. This is confirmed in Intel
	Software Dev. Manual, Vol. 3. */
    /*下面的栅栏会阻止这个线程在提交test-and-set操作之前读取由互斥锁保护的数据结构，但是栅栏显然是不需要的:
	Andy Glew在1997年8月10日给comp.arch新闻组的一篇文章中说，在P6中，像XCHG这样的锁定指令建立了一个关于内存读写的栅栏，
	因此不需要一个显式的栅栏。在P5中，他似乎同意先前的新闻组公告，即锁定指令序列化所有指令执行，因此也序列化内存操作。
	已在《英特尔软件开发手册》第3卷中确认。*/
	/* mutex_fence(); */

	return(res);
#elif defined(not_defined) && defined(__GNUC__) && defined(UNIV_INTEL_X86)
	ulint*	lw;
	ulint	res;

	lw = &(mutex->lock_word);

	/* In assembly we use the so-called AT & T syntax where
	the order of operands is inverted compared to the ordinary Intel
	syntax. The 'l' after the mnemonics denotes a 32-bit operation.
	The line after the code tells which values come out of the asm
	code, and the second line tells the input to the asm code. */
	/*在汇编中，我们使用所谓的AT&T语法，其中操作数的顺序与普通的Intel语法相反。
	助记符后面的“l”表示32位操作。操作代码后面的一行指示哪些值来自asm代码，第二行指示asm代码的输入。*/
	asm volatile("movl $1, %%eax; xchgl (%%ecx), %%eax" :
	              "=eax" (res), "=m" (*lw) :
	              "ecx" (lw));
	return(res);
#else
	ibool	ret;

	ret = os_fast_mutex_trylock(&(mutex->os_fast_mutex));

	if (ret == 0) {
		mutex->lock_word = 1;
	}

	return(ret);
#endif
}

/**********************************************************************
Performs a reset instruction to the lock_word field of a mutex. This
instruction also serializes memory operations to the program order. */
/*对互斥锁的lock_word字段执行重置指令。这条指令也将内存操作按程序顺序序列化。*/
UNIV_INLINE
void
mutex_reset_lock_word(
/*==================*/
	mutex_t*	mutex)	/* in: mutex */
{
#ifdef _WIN32
	ulint*	lw;		/* assembler code is used to ensure that
				lock_word is loaded from memory */
	ut_ad(mutex);

	lw = &(mutex->lock_word);

	__asm   MOV     EDX, 0
        __asm   MOV     ECX, lw
        __asm   XCHG    EDX, DWORD PTR [ECX]                    
#elif defined(not_defined) && defined(__GNUC__) && defined(UNIV_INTEL_X86)
	ulint*	lw;

	lw = &(mutex->lock_word);

	/* In assembly we use the so-called AT & T syntax where
	the order of operands is inverted compared to the ordinary Intel
	syntax. The 'l' after the mnemonics denotes a 32-bit operation. */

	asm volatile("movl $0, %%eax; xchgl (%%ecx), %%eax" :
	              "=m" (*lw) :
	              "ecx" (lw) :
		      "eax");	/* gcc does not seem to understand
				that our asm code resets eax: tell it
				explicitly that after the third ':' */ /*gcc似乎不理解我们的asm代码重置eax:明确地告诉它在第三个“:”之后*/
#else
	mutex->lock_word = 0;

	os_fast_mutex_unlock(&(mutex->os_fast_mutex));
#endif
}

/**********************************************************************
Gets the value of the lock word. */ /*获取锁字的值。*/
UNIV_INLINE
ulint
mutex_get_lock_word(
/*================*/
	mutex_t*	mutex)	/* in: mutex */
{
volatile ulint*	ptr;		/* declared volatile to ensure that
				lock_word is loaded from memory */
	ut_ad(mutex);

	ptr = &(mutex->lock_word);

	return(*ptr);
}

/**********************************************************************
Gets the waiters field in a mutex. */ /*获取互斥锁中的waiter字段。*/
UNIV_INLINE
ulint
mutex_get_waiters(
/*==============*/
				/* out: value to set */		
	mutex_t*	mutex)	/* in: mutex */
{
volatile ulint*	ptr;		/* declared volatile to ensure that
				the value is read from memory */
	ut_ad(mutex);

	ptr = &(mutex->waiters);

	return(*ptr);		/* Here we assume that the read of a single
				word from memory is atomic */
}

/**********************************************************************
Unlocks a mutex owned by the current thread. */
/*解锁当前线程拥有的互斥锁。*/
UNIV_INLINE
void
mutex_exit(
/*=======*/
	mutex_t*	mutex)	/* in: pointer to mutex */
{
	ut_ad(mutex_own(mutex));

#ifdef UNIV_SYNC_DEBUG
	mutex->thread_id = ULINT_UNDEFINED;

	sync_thread_reset_level(mutex);
#endif 
	mutex_reset_lock_word(mutex);

	/* A problem: we assume that mutex_reset_lock word
	is a memory barrier, that is when we read the waiters
	field next, the read must be serialized in memory
	after the reset. A speculative processor might
	perform the read first, which could leave a waiting
	thread hanging indefinitely.

	Our current solution call every 10 seconds
	sync_arr_wake_threads_if_sema_free()
	to wake up possible hanging threads if
	they are missed in mutex_signal_object. */
    /*问题:我们假设mutex_reset_lock word是一个内存障碍，也就是说，当我们下一步读取等待者字段时，读取必须在重置后在内存中序列化。
	推测的处理器可能会先执行读操作，这可能会使等待的线程无限期地挂起。
	我们当前的解决方案每10秒调用sync_arr_wake_threads_if_sema_free()来唤醒可能挂起的线程，如果它们在mutex_signal_object中丢失了。*/
	if (mutex_get_waiters(mutex) != 0) {
		
		mutex_signal_object(mutex);
	}
	
#ifdef UNIV_SYNC_PERF_STAT
	mutex_exit_count++;
#endif
}

/**********************************************************************
Locks a mutex for the current thread. If the mutex is reserved, the function
spins a preset time (controlled by SYNC_SPIN_ROUNDS), waiting for the mutex
before suspending the thread. */
/*为当前线程锁定互斥锁。如果互斥锁被保留，函数旋转一个预设的时间(由SYNC_SPIN_ROUNDS控制)，在挂起线程之前等待互斥锁。*/
UNIV_INLINE
void
mutex_enter_func(
/*=============*/
	mutex_t*	mutex,	/* in: pointer to mutex */
	char*		file_name,/* in: file name where locked */
	ulint		line)	/* in: line where locked */
{
	ut_ad(mutex_validate(mutex));

	/* Note that we do not peek at the value of lock_word before trying
	the atomic test_and_set; we could peek, and possibly save time. */
	/*注意，在尝试原子test_and_set之前，我们不会偷看lock_word的值;我们可以偷看，也许还能节省时间。*/
	if (!mutex_test_and_set(mutex)) {

		#ifdef UNIV_SYNC_DEBUG
		mutex_set_debug_info(mutex, file_name, line);
		#endif

		mutex->file_name = file_name;
		mutex->line = line;

		return;	/* Succeeded! */
	}

	mutex_spin_wait(mutex, file_name, line);
}
